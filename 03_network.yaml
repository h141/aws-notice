AWSTemplateFormatVersion: 2010-09-09
# -------------------------------------
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Parameters:
          - vAZa
          - vAZc
          # ---
          - vSys1Name
          - vSbn101aCIDR
          - vSbn101cCIDR
          - vSbn1VpcEaCIDR
          - vSbn1VpcEcCIDR
          # ---
          - vSys2Name
          - vSubSys201Name
          - vSubSys202Name
          - vSubSys203Name
          - vSbn201aCIDR
          - vSbn201cCIDR
          - vSbn202aCIDR
          - vSbn202cCIDR
          - vSbn203aCIDR
          - vSbn203cCIDR
          - vSbn2PUBaCIDR
          - vSbn2PUBcCIDR
# -------------------------------------
Parameters:
  vAZa:
    Type: String
    Default: ap-northeast-1a
  vAZc:
    Type: String
    Default: ap-northeast-1c
  # --
  vSys1Name:
    Type: String
    Default: shub-alert
  vSys2Name:
    Type: String
    Default: shub-alertnat
  # --
  vSbn101aCIDR:
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3}).(\\d{1,3})/(\\d{1,2})"
    Default: 192.168.0.0/26
  vSbn101cCIDR:
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3}).(\\d{1,3})/(\\d{1,2})"
    Default: 192.168.0.64/26
  vSbn1VpcEaCIDR:
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3}).(\\d{1,3})/(\\d{1,2})"
    Default: 192.168.0.192/27
  vSbn1VpcEcCIDR:
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3}).(\\d{1,3})/(\\d{1,2})"
    Default: 192.168.0.224/27
  # --
  vSubSys201Name:
    Type: String
    Default: awco
  vSubSys202Name:
    Type: String
    Default: azdo
  vSubSys203Name:
    Type: String
    Default: work
  vSbn201aCIDR:
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3}).(\\d{1,3})/(\\d{1,2})"
    Default: 192.168.1.0/27
  vSbn201cCIDR:
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3}).(\\d{1,3})/(\\d{1,2})"
    Default: 192.168.1.32/27
  vSbn202aCIDR:
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3}).(\\d{1,3})/(\\d{1,2})"
    Default: 192.168.1.64/27
  vSbn202cCIDR:
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3}).(\\d{1,3})/(\\d{1,2})"
    Default: 192.168.1.96/27
  vSbn203aCIDR:
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3}).(\\d{1,3})/(\\d{1,2})"
    Default: 192.168.1.128/28
  vSbn203cCIDR:
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3}).(\\d{1,3})/(\\d{1,2})"
    Default: 192.168.1.144/28
  vSbn2PUBaCIDR:
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3}).(\\d{1,3})/(\\d{1,2})"
    Default: 192.168.1.224/28
  vSbn2PUBcCIDR:
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3}).(\\d{1,3})/(\\d{1,2})"
    Default: 192.168.1.240/28
# -------------------------------------
Resources:
  # ===========================================================================
  # VPC
  # ===========================================================================
  # -- vpc2 ----------------------------------------------------------------------
  # external VPC1forLambdaVPCEID
  # -- vpc2 ----------------------------------------------------------------------
  # external VPC2forLambdaNATID
  # ===========================================================================
  # Subnet
  # ===========================================================================
  Subnet01Private01a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue VPC1forLambdaVPCEID
      AvailabilityZone: !Ref vAZa
      CidrBlock:  !Ref vSbn101aCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${vSys1Name}-pri-subnet-1a"
  Subnet01Private01c:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue VPC1forLambdaVPCEID
      AvailabilityZone: !Ref vAZc
      CidrBlock:  !Ref vSbn101cCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${vSys1Name}-pri-subnet-1c"
  Subnet01VpcEa:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue VPC1forLambdaVPCEID
      AvailabilityZone: !Ref vAZa
      CidrBlock:  !Ref vSbn1VpcEaCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${vSys1Name}-vpce-subnet-1a"
  Subnet01VpcEc:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue VPC1forLambdaVPCEID
      AvailabilityZone: !Ref vAZc
      CidrBlock:  !Ref vSbn1VpcEcCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${vSys1Name}-vpce-subnet-1c"
  # -- vpc2 ----------------------------------------------------------------------
  Subnet02Private01a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue VPC2forLambdaNATID
      AvailabilityZone: !Ref vAZa
      CidrBlock:  !Ref vSbn201aCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${vSys2Name}-pri-${vSubSys201Name}-subnet-1a"
  Subnet02Private01c:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue VPC2forLambdaNATID
      AvailabilityZone: !Ref vAZc
      CidrBlock:  !Ref vSbn201cCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${vSys2Name}-pri-${vSubSys201Name}-subnet-1c"
  Subnet02Private02a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue VPC2forLambdaNATID
      AvailabilityZone: !Ref vAZa
      CidrBlock:  !Ref vSbn202aCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${vSys2Name}-pri-${vSubSys202Name}-subnet-1a"
  Subnet02Private02c:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue VPC2forLambdaNATID
      AvailabilityZone: !Ref vAZc
      CidrBlock:  !Ref vSbn202cCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${vSys2Name}-pri-${vSubSys202Name}-subnet-1a"
  Subnet02Private03a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue VPC2forLambdaNATID
      AvailabilityZone: !Ref vAZa
      CidrBlock:  !Ref vSbn203aCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${vSys2Name}-pri-${vSubSys203Name}-subnet-1a"
  Subnet02Private03c:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue VPC2forLambdaNATID
      AvailabilityZone: !Ref vAZc
      CidrBlock:  !Ref vSbn203cCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${vSys2Name}-pri-${vSubSys203Name}-subnet-1a"
  Subnet02PUBa:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue VPC2forLambdaNATID
      AvailabilityZone: !Ref vAZa
      CidrBlock:  !Ref vSbn2PUBaCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${vSys2Name}-pub-subnet-1a"
  Subnet02PUBc:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !ImportValue VPC2forLambdaNATID
      AvailabilityZone: !Ref vAZc
      CidrBlock:  !Ref vSbn2PUBcCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${vSys2Name}-pub-subnet-1c"
  # ===========================================================================
  # SecurityGroup
  # ===========================================================================
  SGLambdaVPC1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${vSys1Name}-sg-for-lambda"
      GroupDescription: !Sub "${vSys1Name}-sg-for-lambda"
      VpcId: !ImportValue VPC1forLambdaVPCEID
      Tags:
        - Key: Name
          Value: !Sub "${vSys1Name}-sg-for-lambda"
  # -------
  SGvpcEssm:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${vSys1Name}-sg-for-vpce-ssm"
      GroupDescription: !Sub "${vSys1Name}-sg-for-vpce-ssm"
      VpcId: !ImportValue VPC1forLambdaVPCEID
      Tags:
        - Key: Name
          Value: !Sub "${vSys1Name}-sg-for-vpce-ssm"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !GetAtt SGLambdaVPC1.GroupId
      SecurityGroupEgress:
        - CidrIp: 127.0.0.1/32
          IpProtocol: "-1"
  SGvpcEsns:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${vSys1Name}-sg-for-vpce-sns"
      GroupDescription: !Sub "${vSys1Name}-sg-for-vpce-sns"
      VpcId: !ImportValue VPC1forLambdaVPCEID
      Tags:
        - Key: Name
          Value: !Sub "${vSys1Name}-sg-for-vpce-sns"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !GetAtt SGLambdaVPC1.GroupId
      SecurityGroupEgress:
        - CidrIp: 127.0.0.1/32
          IpProtocol: "-1"
  SGvpcElambda:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${vSys1Name}-sg-for-vpce-lambda"
      GroupDescription: !Sub "${vSys1Name}-sg-for-vpce-lambda"
      VpcId: !ImportValue VPC1forLambdaVPCEID
      Tags:
        - Key: Name
          Value: !Sub "${vSys1Name}-sg-for-vpce-lambda"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !GetAtt SGLambdaVPC1.GroupId
      SecurityGroupEgress:
        - CidrIp: 127.0.0.1/32
          IpProtocol: "-1"
  SGvpcEstepfunctions:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${vSys1Name}-sg-for-vpce-stepfunctions"
      GroupDescription: !Sub "${vSys1Name}-sg-for-vpce-stepfunctions"
      VpcId: !ImportValue VPC1forLambdaVPCEID
      Tags:
        - Key: Name
          Value: !Sub "${vSys1Name}-sg-for-vpce-stepfunctions"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !GetAtt SGLambdaVPC1.GroupId
      SecurityGroupEgress:
        - CidrIp: 127.0.0.1/32
          IpProtocol: "-1"
  # -------
  SGLambdaEgress01:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt SGLambdaVPC1.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      DestinationSecurityGroupId: !GetAtt SGvpcEssm.GroupId
  SGLambdaEgress02:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt SGLambdaVPC1.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      DestinationSecurityGroupId: !GetAtt SGvpcEsns.GroupId
  SGLambdaEgress03:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt SGLambdaVPC1.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      DestinationSecurityGroupId: !GetAtt SGvpcElambda.GroupId
  SGLambdaEgress04:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt SGLambdaVPC1.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      DestinationSecurityGroupId: !GetAtt SGvpcEstepfunctions.GroupId
  # -- vpc2 ----------------------------------------------------------------------
  SGLambdaVPC2awsconnect:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${vSys2Name}-sg-for-lambda-to-${vSubSys201Name}"
      GroupDescription: !Sub "${vSys2Name}-sg-for-lambda-to-${vSubSys201Name}"
      VpcId: !ImportValue VPC2forLambdaNATID
      Tags:
        - Key: Name
          Value: !Sub "${vSys2Name}-sg-for-lambda-to-${vSubSys201Name}"
      SecurityGroupEgress:
        - IpProtocol: udp
          FromPort: 3478
          ToPort: 3478
          CidrIp: 15.193.0.0/19
          Description: AWS Connect GLOBAL 202111
        - IpProtocol: udp
          FromPort: 3478
          ToPort: 3478
          CidrIp: 18.182.96.64/26
          Description: AWS Connect ap-northeast-1 202111
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: AWS Connect HTTPS
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: AWS Connect HTTP
  SGLambdaVPC2Azuredevopsboard:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${vSys2Name}-sg-for-lambda-to-${vSubSys202Name}"
      GroupDescription: !Sub "${vSys2Name}-sg-for-lambda-to-${vSubSys202Name}"
      VpcId: !ImportValue VPC2forLambdaNATID
      Tags:
        - Key: Name
          Value: !Sub "${vSys2Name}-sg-for-lambda-to-${vSubSys202Name}"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 13.107.6.0/24
          Description: MS DevOps
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 13.107.9.0/24
          Description: MS DevOps
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 13.107.42.0/24
          Description: MS DevOps
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 13.107.43.0/24
          Description: MS DevOps
  SGEC2VPC2ForWork:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${vSys2Name}-sg-for-ec2-to-${vSubSys203Name}"
      GroupDescription: !Sub "${vSys2Name}-sg-for-lambda-to-${vSubSys203Name}"
      VpcId: !ImportValue VPC2forLambdaNATID
      Tags:
        - Key: Name
          Value: !Sub "${vSys2Name}-sg-for-ec2-to-${vSubSys203Name}"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: AWS SSM HTTPS GitHub
  # ===========================================================================
  # Internet Gateway vpc2
  # ===========================================================================
  InternetGatewayforNAT:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${vSys2Name}-igw"
  IGWAttachVPCforNAT:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !ImportValue VPC2forLambdaNATID
      InternetGatewayId: !Ref InternetGatewayforNAT
  # ===========================================================================
  # Elastic IP Address vpc2
  # ===========================================================================
  ElasticIPforNAT:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${vSys2Name}-eip"
    DependsOn: IGWAttachVPCforNAT
    # require gateway attachement
  # ===========================================================================
  # NAT Gateway vpc2
  # ===========================================================================
  NATGatewayforlambda:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPforNAT.AllocationId
      SubnetId: !Ref Subnet02PUBa
      Tags:
        - Key: Name
          Value: !Sub "${vSys2Name}-pub-natgw-1a"
  # ===========================================================================
  # RouteTable vpc2
  # ===========================================================================
  RouteTable201:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue VPC2forLambdaNATID
      Tags:
        - Key: Name
          Value: !Sub "${vSys2Name}-pri-${vSubSys201Name}-routetable"
  Route01onRouteTable201:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable201
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayforlambda
  RouteTableAssociation201a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable201
      SubnetId: !Ref Subnet02Private01a
  RouteTableAssociation201c:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable201
      SubnetId: !Ref Subnet02Private01c
  # --
  RouteTable202:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue VPC2forLambdaNATID
      Tags:
        - Key: Name
          Value: !Sub "${vSys2Name}-pri-${vSubSys202Name}-routetable"
  Route01onRouteTable202:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable202
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayforlambda
  RouteTableAssociation202a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable202
      SubnetId: !Ref Subnet02Private02a
  RouteTableAssociation202c:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable202
      SubnetId: !Ref Subnet02Private02c
  # --
  RouteTable203:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue VPC2forLambdaNATID
      Tags:
        - Key: Name
          Value: !Sub "${vSys2Name}-pri-${vSubSys203Name}-routetable"
  Route01onRouteTable203:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable203
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayforlambda
  RouteTableAssociation203a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable203
      SubnetId: !Ref Subnet02Private03a
  RouteTableAssociation203c:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable203
      SubnetId: !Ref Subnet02Private03c
  # --
  RouteTablePUB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue VPC2forLambdaNATID
      Tags:
        - Key: Name
          Value: !Sub "${vSys2Name}-pub-routetable"
  Route01onRouteTablePUB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePUB
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayforNAT
    DependsOn: IGWAttachVPCforNAT
    # require gateway attachement
  RouteTableAssociationPUBa:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePUB
      SubnetId: !Ref Subnet02PUBa
  RouteTableAssociationPUBc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePUB
      SubnetId: !Ref Subnet02PUBc
  # ===========================================================================
  # VpcEndpoint vpc1
  # ===========================================================================
  VpcEndpointSSM:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcId: !ImportValue VPC1forLambdaVPCEID
      SubnetIds:
        - !Ref Subnet01VpcEa
        - !Ref Subnet01VpcEc
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt SGvpcEssm.GroupId
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - ssm:DescribeParameters
            Resource: '*'
            Principal:
              AWS:
                - !ImportValue IAMRoleAlertSnsMailArn
                - !ImportValue IAMRoleAlertBoardIssueArn
                - !ImportValue IAMRoleAlertConnectPhoneArn
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:GetParameterHistory
              - ssm:GetParametersByPath
            Resource:
              - !Sub "arn:aws:ssm:*:${AWS::AccountId}:*"
            Principal:
              AWS:
                - !ImportValue IAMRoleAlertSnsMailArn
                - !ImportValue IAMRoleAlertBoardIssueArn
                - !ImportValue IAMRoleAlertConnectPhoneArn
  VpcEndpointSNS:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.sns"
      VpcId: !ImportValue VPC1forLambdaVPCEID
      SubnetIds:
        - !Ref Subnet01VpcEa
        - !Ref Subnet01VpcEc
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt SGvpcEsns.GroupId
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - SNS:Publish
            Resource:
              - !Sub "arn:aws:sns:*:${AWS::AccountId}:*"
            Principal:
              AWS:
                - !ImportValue IAMRoleAlertSnsMailArn
  VpcEndpointLambda:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.lambda"
      VpcId: !ImportValue VPC1forLambdaVPCEID
      SubnetIds:
        - !Ref Subnet01VpcEa
        - !Ref Subnet01VpcEc
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt SGvpcElambda.GroupId
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:shub-alert-*"
            Principal:
              AWS:
                - !ImportValue IAMRolesiem2securityhubArn
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:shub-sub-*"
            Principal:
              AWS:
                - !ImportValue IAMRoleAlertBoardIssueArn
  VpcEndpointStepfunctions:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.states"
      VpcId: !ImportValue VPC1forLambdaVPCEID
      SubnetIds:
        - !Ref Subnet01VpcEa
        - !Ref Subnet01VpcEc
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !GetAtt SGvpcEstepfunctions.GroupId
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - !Sub "arn:aws:states:*:${AWS::AccountId}:*"
            Principal:
              AWS:
                - !ImportValue IAMRoleAlertConnectPhoneArn
# -----------------------------------------------
Outputs:
  Subnet01Private01aID:
    Description: VPC 1 Private Subnet 1a ID
    Value: !Ref Subnet01Private01a
    Export:
      Name: Subnet01Private01aID
  Subnet01Private01cID:
    Description: VPC 1 Private Subnet 1c ID
    Value: !Ref Subnet01Private01c
    Export:
      Name: Subnet01Private01cID
  # --
  SGLambdaVPC1ID:
    Description: SG for VPC1 Lambda
    Value: !GetAtt SGLambdaVPC1.GroupId
    Export:
      Name: SGLambdaVPC1ID
  # --
  VpcEndpointSSMID:
    Value: !Ref VpcEndpointSSM
  VpcEndpointSSMName:
    Value: !Sub "${vSys1Name}-vpce-ssm"
  VpcEndpointSNSID:
    Value: !Ref VpcEndpointSNS
  VpcEndpointSNSName:
    Value: !Sub "${vSys1Name}-vpce-sns"
  VpcEndpointLambdaID:
    Value: !Ref VpcEndpointLambda
  VpcEndpointLambdaName:
    Value: !Sub "${vSys1Name}-vpce-lambda"
  VpcEndpointStepfunctionsID:
    Value: !Ref VpcEndpointStepfunctions
  VpcEndpointStepfunctionsName:
    Value: !Sub "${vSys1Name}-vpce-stepfunctions"
  # -- vpc2 ----------------------------------------------------------------------
  Subnet02Private01aID:
    Description: VPC 2 Private Subnet 1a ID
    Value: !Ref Subnet02Private01a
    Export:
      Name: Subnet02Private01aID
  Subnet02Private01cID:
    Description: VPC 2 Private Subnet 1c ID
    Value: !Ref Subnet02Private01c
    Export:
      Name: Subnet02Private01cID
  Subnet02Private02aID:
    Description: VPC 2 Private Subnet 2a ID
    Value: !Ref Subnet02Private02a
    Export:
      Name: Subnet02Private02aID
  Subnet02Private02cID:
    Description: VPC 2 Private Subnet 2c ID
    Value: !Ref Subnet02Private02c
    Export:
      Name: Subnet02Private02cID
  Subnet02Private03aID:
    Description: VPC 2 Private Subnet 3a ID
    Value: !Ref Subnet02Private03a
    Export:
      Name: Subnet02Private03aID
  Subnet02Private03cID:
    Description: VPC 2 Private Subnet 3c ID
    Value: !Ref Subnet02Private03c
    Export:
      Name: Subnet02Private03cID
  # --
  SGLambdaVPC2awsconnectID:
    Description: SG for VPC2 Lambda awsconnect
    Value: !GetAtt SGLambdaVPC2awsconnect.GroupId
    Export:
      Name: SGLambdaVPC2awsconnectID
  SGLambdaVPC2AzuredevopsboardID:
    Description: SG for VPC2 Lambda Azuredevopsboard
    Value: !GetAtt SGLambdaVPC2Azuredevopsboard.GroupId
    Export:
      Name: SGLambdaVPC2AzuredevopsboardID
  SGEC2VPC2ForWorkID:
    Description: SG for VPC2 EC2 For Work
    Value: !GetAtt SGEC2VPC2ForWork.GroupId
    Export:
      Name: SGEC2VPC2ForWorkID
